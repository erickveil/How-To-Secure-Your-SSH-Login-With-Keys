{"name":"How To Secure Your SSH Login With Keys","tagline":"Using RSA keys is a more secure way to protect a server that you remotely access via SSH.","body":"# How-To-Secure-Your-SSH-Login-With-Keys\r\nUsing RSA keys is a more secure way to protect a server that you remotely access via SSH.\r\nVisual Host Keys\r\n---\r\nYou can set up your ssh to draw a \"randomart image\" every time you ssh into a computer.\r\nThe randomart is unique for each computer you log in to.\r\nThis ascii art performs the function of a hash: because it is unique, and because it is immediately more \r\nrecognizable to a human than a string of characters would be, a user can immediately tell that the computer \r\nthat is being logged on to is the correct computer.\r\nWe humans recognize images-- even random ascii images-- far more easily than we remember character strings.\r\n \r\nYou can add the option to your log in:\r\n`ssh -o VisualHostKey=yes eveil@192.168.58.197`\r\n\r\nOr, even better, you can add it to your `.ssh/config` file so that you see the randomart every time you log in.\r\nIf `~/.ssh/config` does not exist on your system, you can add it with vim (or your favorite text editor).\r\n\r\nThe line that needs to be in the file is:\r\n`VisualHostKey=yes`\r\n\r\nSome example randomart:\r\n```\r\nHost key fingerprint is SHA256:ebUiTwA1htZ0Rmj4bE5nJLaINuv+zyWe8oj2dLVcCNY\r\n+---[ECDSA 256]---+\r\n|      .*=o+      |\r\n|      +o*=.      |\r\n|     o *++E .    |\r\n|    + ..*+oo .   |\r\n|   . o +So* o    |\r\n|    .   .B +     |\r\n|   .  . o =      |\r\n|    oo.= +       |\r\n|   ooo++*        |\r\n+----[SHA256]-----+\r\n```\r\n```\r\nECDSA key fingerprint is SHA256:enY+IENW64ubZW7EzQWIYpNNY1xmiFM/D5Dip/t3Y1w.\r\n+---[ECDSA 256]---+\r\n|     B*=+.       |\r\n|    O.**o .      |\r\n|   o = .+. .     |\r\n|    . + .+  .    |\r\n|     = oSo..     |\r\n|    . o.= o E    |\r\n|     ..==+..     |\r\n|    . .B+o*      |\r\n|     .++.o.o     |\r\n+----[SHA256]-----+\r\n```\r\n\r\nGenerating RSA Keys\r\n---\r\nKeys are more secure than passwords. They are longer, more random, impossible to guess, and significantly more \r\ndifficult to brute force.\r\n\r\nOn the client:\r\n`ssh-keygen -t rsa -b 4096`\r\n\r\nRSA is the [cryptosystem](https://en.wikipedia.org/wiki/RSA_%28cryptosystem%29).\r\n\r\n\r\n4096 tells ssh-keygen that you want to make a 4096 bit key, which is even harder to crack than the default \r\n2048.\r\n\r\nAnswer the questions. The default answers are in parentheses, you can just press `ENTER` to accept the default. \r\nI recommend you choose a good password for your keys.\r\n\r\nNext copy the key to the server:\r\n`ssh-copy-id <username>@<host>`\r\n\r\nOr, if you need to specify a port, you need to add quotes, due to a bug:\r\n`ssh-copy-id \"<username>@<host> -p <port>\"`\r\nAnother \r\nway is to use `scp` to copy the key over (`id_rsa.pub` is the key that we are sending the server) and \r\ncat it onto the `~/.ssh/authorized_keys` after backing up:\r\n`cat id_rsa.pub >> authorized_keys`\r\n\r\nTry using ssh to log on and make sure it worked.\r\nYou will need to use the key's password now, instead of the user login password.\r\nIf you know the user password, but forget (gasp!) your key's password, you can still just press enter for the \r\nuser password prompt to get in instead.\r\nUnless, that is, you've disabled password logins. Which is what you would do. Because that's the whole point.\r\n\r\nOnce you've created your keys on your client, you can send the public key to any machine you log in on for easy \r\nkey logins.\r\n\r\nFinally, to turn off password authenification, sudo or root edit `/etc/ssh/sshd_config`\r\n\r\nAnd change the `PasswordAuthentication yes` to `PasswordAuthentication no`\r\n\r\nRestart sshd to make your config changes take effect.\r\n`sudo systemctl restart sshd.service`\r\n\r\nAnd that's it. You now have a secure server for shelling in to with keys only.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}